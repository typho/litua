DocumentTree(Function(DocumentFunction { name: "document", args: {"filepath": [Text("./examples/literate-programming/doc.lit")]}, content: [Function(DocumentFunction { name: "docu", args: {"=whitespace": [Text(" ")]}, content: [Text("\n  Hello World!\n")] }), Text("\n\n"), Function(DocumentFunction { name: "code", args: {"=whitespace": [Text(" ")]}, content: [Function(DocumentFunction { name: "<", args: {"=whitespace": [Text("\n")]}, content: [Text("    let mut p = String::new();\n    p.push_str(&s[0..s.rfind(\".\").unwrap()]);\n    p.push_str(\".\");\n    p.push_str(ext);\n    p\n")] })] }), Text("\n\n"), Function(DocumentFunction { name: "docu", args: {"=whitespace": [Text("\n")]}, content: [Text("  This is an ordered list:\n")] }), Text("\n\n"), Function(DocumentFunction { name: "code", args: {"=whitespace": [Text(" ")]}, content: [Function(DocumentFunction { name: "<<", args: {"=whitespace": [Text("\n")]}, content: [Text("    if args_string == \"\" and content_string == \"\" then\n        return \"{\" .. node.call .. \"}\"\n    elseif args_string == \"\" then\n        return \"{\" .. node.call .. \" \" .. content_string .. \"}\"\n    elseif content_string == \"\" then\n        return \"{\" .. node.call .. args_string .. \"}\"\n    else\n        return \"{\" .. node.call .. args_string .. \"\\n\" .. content_string .. \"}\"\n    end\n")] })] })] }))
